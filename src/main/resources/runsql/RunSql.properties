#
# Copyright 2019 William Bruschi - williambruschi.net
#
# This file is part of runsql.
#
# runsql is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# runsql is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with runsql.  If not, see <https://www.gnu.org/licenses/>.
#
#

options.url=The url of the source database connection.
options.user=The user for the source database connection.
options.password=The password for the source database connection.
options.driver=The jdbc driver class name.
options.propertiesFilePath=Path to a properties file containing arguments for invoking RunSql. Each entry should \
  contain a RunSql parameter name followed by the value in the form of a Java properties file. Arguments passed \
  via the command line override arguments contained in the properties file. You can also provide this path by \
  setting the environment variable RUNSQL_PROPERTIES_FILE.
options.propertiesPrefix=The optional prefix to use when reading the properties file. Useful if you have multiple database \
  connections in a single properties file. When using the prefix, each line should have the form <PREFIX><PARAM>=<VALUES>. \
  You can also provide this prefix by setting the environment variable RUNSQL_PROPERTIES_PREFIX.
options.sql=The sql to run. You may specify this argument more than once.
options.splitSql=When t (the default) splits the sql into multiple sql statements for execution. You may want to \
  turn this off when creating stored procedures or functions.
options.sqlSeparator=The character(s) separator when splitting sql statements. Defaults to ;.
options.stripComments=When t (the default) strips any comments from the sql before executing. \
  You may want to leave comments when executing database specific directives contained within the comments.
options.valueWhenNull=The value to write to output for NULL database values. Defaults to null.
options.quoteValue=Character(s) that surround each value when printing output. Usually a single or double quote.
options.quoteMode=One of never, always, text or necessary. Controls which values to surround with quotes. \
  'text' will print quotes for all non-numerical values. 'necessary' will print quotes only when the value \
  contains the column separator character. Defaults to 'necessary'.
options.escapeCharacter=An escape character to use when enclosing string values. Defaults to backslash.
options.outputFilePath=Write the results of the sql query to the specified file. Defaults to standard output. \
  You may also specify "-" for standard output.
options.rowSeparator=The row separator when displaying results. Defaults to system specific new line. Use Java \
  characters when specifying new line characters. For example, to specify the Windows format use the character \
  string \\r\\n.
options.columnSeparator=Column separator for printing results. Defaults to tab character.
options.help=Print this help message.
options.includeHeaders=When printing the resultset, specify t to output the column names before the \
  first record. Defaults to f.
options.inputFile=Path to a file that contains sql to execute. Use "-" to read from standard input. If supplied with \
  the -sql option, the contents in the -sql option execute first. RunSQL reads and executes the sql statement by \
  statement and works well with Linux piping.
options.fileFormat=One of csv, msdoscsv or inserts. Other specified formatting options will override the settings \
  established by these file formats.\n\
  csv: Output files in csv format. Columns will be separted by commas and text surrounded by double quotes.\n\
  msdoscsv: Same as csv except outputs msdos newlines and prepends an equals sign to numeric text for displaying \
  leading zeros in Excel.\n\
  inserts: Generates input statements from the results. Useful for making a quick backup script of the table's data. \
  You must supply the tablename option when using this format.
options.tableName=When printing insert statements, the table name to use for the statements. Else a shortcut for \
  selecting all rows from the specified table.
options.echoSql=Specify a file path to log each sql statement before executing. Use - for standard output.
options.batchSize=A positive number indicating the number of statements to group together before executing on the database. \
  Defaults to 1 (execute after every statement). Will throw an error if your database does not support batch updates. \
  Primarily intended for DML (Data Manipulation Language) statements such as delete, update or insert. Executing in batches \
  will not return any results if successful and will throw an error if any of the statements fail. Note that if you choose not\
  to split sql statements, the batch size number you enter may not match the exact number of sql statements in each batch. \
  Setting a batch size may help in scenarios where you need to execute a large number of DML statements on a remote server.
options.transactionMode=One of "auto", "rollback", or a positive integer. "auto" will commit transactions after every statement. \
  "rollback" will rollback all changes after all the sql statements execute. If you provide a number, RunSQL will commit after \
  it executes that number of statements. Defaults to "auto" unless you specify a batchsize in which case it defaults to the \
  batchsize. Note that if you choose not to split sql statements, each group of statements will be treated as a single unit in \
  terms of when RunSQL commits a transaction.
options.booleanTrueValue=Value to display for boolean true values. Defaults to 'true'.
options.booleanFalseValue=Value to display for boolean false values. Defaults to 'false'.
options.importTable=When specified, RunSQL will import the result set into the table. If you provide multiple sql statements, \
  RunSQL will import all the result sets from each statement. Each column in the result set must align with each column \
  in the table. RunSQL will ignore any columns in the result set beyond the number of columns in the table, which is useful \
  if your sql query requires additional columns for ordering, for example. When you specify this option, the batchsize option \
  applies to the import connection and the transactionmode option applies to both the import and export connections. The default \
  batch size when importing data is one, so we recommend specifying the batch size based on the expected number of rows to \
  import and the memory capacity of the machine.
options.importColumns=An optional comma separated list of column names to use in conjunction with the importtable parameter. \
  This column list must align with the columns in the result set. If omitted, RunSQL will use the columns of the table specified \
  in the --importtable parameter.
options.importPropertiesFilePath=Path to a properties file for import properties. Defaults to the --propertiesfilepath argument.
options.importPropertiesPrefix=Prefix for the import properties. Defaulst to the propertiesprefix arguments.
options.importDriver=When importing data, the JDBC driver class name for the import connection. Defaults to the --driver argument.
options.importUrl=When importing data, the URL of the import connection. Defaults to the --url argument.
options.importUser=When importing data, the user of the import connection. Defaults to the --user argument.
options.importPassword=When importing data, the password of the import connection. Defaults to the --password argument.
options.resultSetFetchSize=The number of rows to retrieve from the database at a time. Defaults to 0, which lets the JDBC driver decide. \
  Use this to fine tune memory consumption when processing large result sets. Consult your JDBC driver for details. MySQL, for example, will \
  by default retrieve the entire result set and store it in memory unless you set the fetch size to Integer.MIN_VALUE. This argument does \
  not apply when running in batch mode. If you are migrating data, this argument only applies to the export connection.
options.numberOfJobs=The number of concurrent jobs to do work. When running in "import" mode by specifing --importtable, N jobs will \
  execute the generated insert statements concurrently but the sql used to generate the result set for the insert statements is still \
  run sequentially. When not running in "import" mode, N jobs will execute the supplied sql statements concurrently. \
  Defaults to one. When not in import mode and only running a single sql statement adjusting this will have little effect; \
  you usually only want to adjust when processing a large amount of insert statements. A good start is the number of CPU cores minus \
  one, as one thread is needed to parse the sql statements. Do not adjust this option if printing output or undefined behavior may result!
help.header=A simple command line utility for executing sql on a variety of jdbc compliant databases.\n\n\
  Connection options
help.footer=See runsql on GitHub for more information.
